// Main build script for Weather
//
// Usage: gradlew assembleDebug           Build debug APK
//        gradlew assembleRelease         Build production APK
//        gradlew connectedAndroidTest    Unit testing
//        gradle wrapper                  Create Gradle Wrapper
// source: https://github.com/petrnohejl/Android-Templates-And-Utilities/blob/master/Base/mobile/build.gradle

final VERSION_MAJOR = 1 // max two digits
final VERSION_MINOR = 0 // max two digits
final VERSION_PATCH = 0 // max two digits
final VERSION_BUILD = 0 // max three digits

apply plugin: 'com.android.application'


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.android.support:recyclerview-v7:22.2.0'
    compile 'com.android.support:design:22.2.0'
    compile 'com.google.android.gms:play-services:7.5.0'
    compile 'com.mcxiaoke.volley:library:1.0.16'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.squareup:otto:1.3.8'

    // some tools for testing
    compile 'org.lucasr.dspec:dspec:0.1.1'
    compile 'com.facebook.stetho:stetho-okhttp:1.1.1'
    compile 'com.facebook.stetho:stetho-okhttp:1.1.1'
    compile 'com.squareup.okhttp:okhttp:2.3.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.android.support.test:runner:0.3'


}

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'

    defaultConfig {
        applicationId "com.marcelsyrucek.weather"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode VERSION_MAJOR * 10000000 + VERSION_MINOR * 100000 + VERSION_PATCH * 1000 + VERSION_BUILD
        versionName "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    signingConfigs
            {
                release
                        {
                            // passwords and alias are obtained via askForPasswords task
                            storeFile file("../${project.property('keystore.file')}")
                            storePassword ""
                            keyAlias ""
                            keyPassword ""
                        }
            }

    buildTypes
            {
                debug
                        {
                            buildConfigField "boolean", "LOGS", "true"
                            buildConfigField "boolean", "DEV_API", "false"

                            versionNameSuffix "-debug"
                        }

                release
                        {
                            buildConfigField "boolean", "LOGS", "false"
                            buildConfigField "boolean", "DEV_API", "false"

                            signingConfig signingConfigs.release
                            zipAlignEnabled true
                            minifyEnabled false
                            shrinkResources false
                            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                        }
            }

    applicationVariants.all
            {
                variant ->
                    if (variant.buildType.name.equals("release")) {
                        variant.outputs.each
                                {
                                    output ->
                                        def outputFile = output.outputFile
                                        def date = new Date()
                                        if (outputFile != null && outputFile.name.endsWith('.apk')) {
                                            def fileName = outputFile.name.replace(
                                                    "mobile",
                                                    "example-" + defaultConfig.versionName + "-" + defaultConfig.versionCode + "-" + date.format('yyyyMMdd'))
                                            output.outputFile = new File((String) outputFile.parent, (String) fileName)
                                        }
                                }
                    }
            }
}


task askForPasswords <<
        {
            def storePass
            def keyAlias
            def keyPass

            def keystorePropertiesFile = new File(project.property("keystore.properties"))

            if (project.hasProperty("keystore.properties") && keystorePropertiesFile.exists()) {
                println "Loading keystore passwords from property file..."
                Properties properties = new Properties()
                properties.load(new FileInputStream(keystorePropertiesFile))
                storePass = properties['keystore.store.password']
                keyAlias = properties['keystore.key.alias']
                keyPass = properties['keystore.key.password']
            } else {
                println "Getting keystore passwords from user input..."
                storePass = new String(System.console().readPassword("\nStore password: "))
                keyAlias = new String(System.console().readLine("Key alias: "))
                keyPass = new String(System.console().readPassword("Key password: "))
            }

            android.signingConfigs.release.storePassword = storePass
            android.signingConfigs.release.keyAlias = keyAlias
            android.signingConfigs.release.keyPassword = keyPass
        }


tasks.whenTaskAdded
        {
            theTask ->
                if (theTask.name.equals("packageRelease")) {
                    theTask.dependsOn "askForPasswords"
                }
        }

